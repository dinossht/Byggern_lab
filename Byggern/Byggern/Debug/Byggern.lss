
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000090  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000e4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000115  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ae  00000000  00000000  00000269  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000006e2  00000000  00000000  00000317  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000048  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000d70a  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000020  00000000  00000000  0000e14e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  0000304f  00000000  00000000  0000e16e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	37 c0       	rjmp	.+110    	; 0x70 <__ctors_end>
   2:	00 00       	nop
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	00 00       	nop
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	00 00       	nop
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	00 00       	nop
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	00 00       	nop
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	00 00       	nop
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	00 00       	nop
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	00 00       	nop
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	00 00       	nop
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	00 00       	nop
  34:	25 c0       	rjmp	.+74     	; 0x80 <__bad_interrupt>
  36:	00 00       	nop
  38:	23 c0       	rjmp	.+70     	; 0x80 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	21 c0       	rjmp	.+66     	; 0x80 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1f c0       	rjmp	.+62     	; 0x80 <__bad_interrupt>
  42:	00 00       	nop
  44:	1d c0       	rjmp	.+58     	; 0x80 <__bad_interrupt>
  46:	00 00       	nop
  48:	1b c0       	rjmp	.+54     	; 0x80 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	19 c0       	rjmp	.+50     	; 0x80 <__bad_interrupt>
  4e:	00 00       	nop
  50:	17 c0       	rjmp	.+46     	; 0x80 <__bad_interrupt>
  52:	00 00       	nop
  54:	15 c0       	rjmp	.+42     	; 0x80 <__bad_interrupt>
  56:	00 00       	nop
  58:	13 c0       	rjmp	.+38     	; 0x80 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	11 c0       	rjmp	.+34     	; 0x80 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0f c0       	rjmp	.+30     	; 0x80 <__bad_interrupt>
  62:	00 00       	nop
  64:	0d c0       	rjmp	.+26     	; 0x80 <__bad_interrupt>
  66:	00 00       	nop
  68:	0b c0       	rjmp	.+22     	; 0x80 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	09 c0       	rjmp	.+18     	; 0x80 <__bad_interrupt>
	...

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	03 d0       	rcall	.+6      	; 0x84 <main>
  7e:	06 c0       	rjmp	.+12     	; 0x8c <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  82:	08 95       	ret

00000084 <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).

	board_init();
  84:	fe df       	rcall	.-4      	; 0x82 <board_init>

	// Insert application code here, after the board has been initialized.
}
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 95       	ret

0000008c <_exit>:
  8c:	f8 94       	cli

0000008e <__stop_program>:
  8e:	ff cf       	rjmp	.-2      	; 0x8e <__stop_program>
